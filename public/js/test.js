SpsvSHA256 = new function() {	var BitConverterToInt = function(Bytes, Index) {		return (Bytes[Index++] << 24) + (Bytes[Index++] << 16) + (Bytes[Index++] << 8) + (Bytes[Index++]);	};	var BitConverterToBytes = function(Bytes, Value) {		Bytes[Bytes.length] = (Value & 0xff000000) >>> 24;		Bytes[Bytes.length] = (Value & 0x00ff0000) >>> 16;		Bytes[Bytes.length] = (Value & 0x0000ff00) >>> 8;		Bytes[Bytes.length] = (Value & 0x000000ff);	};	var k = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];	var w = 32;	var SHR  = function(v, n) { return v >>> n };	var SHL  = function(v, n) { return v << n };	var ROTR = function(v, n) { return (v >>> n) | (v << (w - n)) };	var ROTL = function(v, n) { return (v >>> (w - n)) | (v << n) };	var Ch   = function(x, y, z) { return (x & y) ^ (~x & z) };	var Maj  = function(x, y, z) { return (x & y) ^ (x & z) ^ (y & z) };	var SIGMA0 = function(v) { return ROTR(v,	 2) ^ ROTR(v, 13) ^ ROTR(v, 22) };	var SIGMA1 = function(v) { return ROTR(v,	 6) ^ ROTR(v, 11) ^ ROTR(v, 25) };	var sigma0 = function(v) { return ROTR(v,	 7) ^ ROTR(v, 18) ^ SHR(v,	3) };	var sigma1 = function(v) { return ROTR(v, 17) ^ ROTR(v, 19) ^ SHR(v, 10) };	var safeAdd2 = function(v1, v2) { return (v1 + v2) & 0xffffffff };	var safeAdd4 = function(v1, v2, v3, v4) { return (v1 + v2 + v3 + v4) & 0xffffffff };	var safeAdd5 = function(v1, v2, v3, v4, v5) { return (v1 + v2 + v3 + v4 + v5) & 0xffffffff };	var Computation = function(hash, block) {		var t1, t2;		var w = [];		var a, b, c, d, e, f, g, h;		var i, j;		a = hash[0]; b = hash[1]; c = hash[2]; d = hash[3];		e = hash[4]; f = hash[5]; g = hash[6]; h = hash[7];		for(i = 0; i < 64; i++) {			if(i < 16) {				w[i] = BitConverterToInt(block, i << 2);			} else {				w[i] = safeAdd4(sigma1(w[i - 2]), w[i - 7], sigma0(w[i - 15]), w[i - 16]);			}			t1 = safeAdd5(h, SIGMA1(e), Ch(e, f, g), k[i], w[i]);			t2 = safeAdd2(SIGMA0(a), Maj(a, b, c));			h = g;			g = f;			f = e;			e = safeAdd2(d, t1);			d = c;			c = b;			b = a;			a = safeAdd2(t1, t2);		}		var intHash = [];		intHash[0] = safeAdd2(hash[0], a);		intHash[1] = safeAdd2(hash[1], b);		intHash[2] = safeAdd2(hash[2], c);		intHash[3] = safeAdd2(hash[3], d);		intHash[4] = safeAdd2(hash[4], e);		intHash[5] = safeAdd2(hash[5], f);		intHash[6] = safeAdd2(hash[6], g);		intHash[7] = safeAdd2(hash[7], h);		return intHash;	};	this.ComputeHash = function(input) {		var intBlock, i, j;		var lngLength = input.length;		input[input.length] = 0x80;		intBlock = (input.length >>> 6) + 1;		if((input.length & 0x3f) > 56) intBlock++;		for(i = input.length; i < (intBlock << 6); i++)			input[i] = 0x00;		lngLength <<= 3;		input[(intBlock << 6) - 4] = (lngLength & 0xff000000) >>> 24;		input[(intBlock << 6) - 3] = (lngLength & 0x00ff0000) >>> 16;		input[(intBlock << 6) - 2] = (lngLength & 0x0000ff00) >>> 8;		input[(intBlock << 6) - 1] =  lngLength & 0x000000ff;		var intHash = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];		var bytBlock = [];		for(i = 0; i < intBlock; i++) {			for(j = 0; j < 64; j++)				bytBlock[j] = input[(i << 6) + j];			intHash = Computation(intHash, bytBlock);		}		var bytReturn = [];		for(i = 0; i < 8; i++) {			BitConverterToBytes(bytReturn, intHash[i]);		}		return bytReturn;	};};function SpsvSHA256Hash(Text) {	var BytesToString = function(input) {		var i;		var strReturn = "";		for(i = 0; i < input.length; i++) {			strReturn += (input[i] > 0x0f ? "" : "0") + input[i].toString(16);		}		return strReturn;	};	var StringToBytes = function(input) {		var i, n;		var bytReturn = [];		var chrCode;		for(i = n = 0; i < input.length; i++) {			chrCode = input.charCodeAt(i);			if(chrCode > 0xff) {				bytReturn[n++] = chrCode >>> 8;				bytReturn[n++] = chrCode & 0xff;			} else {				bytReturn[n++] = chrCode;			}		}		return bytReturn;	};	var bytData = StringToBytes(Text);	var bytHash = SpsvSHA256.ComputeHash(bytData);	return BytesToString(bytHash);};(function (name, context, definition) {	if (typeof module !== 'undefined' && module.exports) { module.exports = definition(); }	else if (typeof define === 'function' && define.amd) { define(definition); }	else { context[name] = definition(); }})('SpsvFingerprint', this, function () {	'use strict';	var SpsvFingerprint = function (options) {	var nativeForEach, nativeMap;	nativeForEach = Array.prototype.forEach;	nativeMap = Array.prototype.map;	this.each = function (obj, iterator, context) {		if (obj === null) {			return;		}		if (nativeForEach && obj.forEach === nativeForEach) {			obj.forEach(iterator, context);		} else if (obj.length === +obj.length) {			for (var i = 0, l = obj.length; i < l; i++) {				if (iterator.call(context, obj[i], i, obj) === {}){					return;				}			}		} else {			for (var key in obj) {				if (obj.hasOwnProperty(key)) {					if (iterator.call(context, obj[key], key, obj) === {}) {						return;					}				}			}		}	};	this.map = function(obj, iterator, context) {		var results = [];		if (obj == null) return results;		if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);		this.each(obj, function(value, index, list) {			results[results.length] = iterator.call(context, value, index, list);		});		return results;	};	if (typeof options == 'object'){		this.hasher = options.hasher;		this.screen_resolution = options.screen_resolution;		this.screen_orientation = options.screen_orientation;		this.canvas = options.canvas;		this.ie_activex = options.ie_activex;	} else if(typeof options == 'function'){		this.hasher = options;	}};SpsvFingerprint.prototype = {	get: function(){		var keys = [];		var flags = [];		keys.push(screen.colorDepth + "bit");		if(screen.colorDepth) {			flags.push("1");		} else {			flags.push("0");		}		keys.push(screen.width/screen.height);		if (screen.width && screen.height) {			flags.push("1");		} else {			flags.push("0");		}		keys.push(this.getSpsvCanvasFingerprint());		if (keys[2] != "") {			flags.push("1");		} else {			flags.push("0");		}		for (var i = 0; i < flags.length; i++) {			if (flags[i] == "1") {				var src_text = keys.join("###");				return SpsvSHA256Hash(src_text)  + "_" + flags.join("");			}		}		return "0000000000000000000000000000000000000000000000000000000000000000" + "_" + flags.join("");	},	gethash: function(keys) {		if(this.hasher){		return this.hasher(keys.join('###'), 63);		} else {		return this.murmurhash3_32_gc(keys.join('###'), 63);		}	},	murmurhash3_32_gc: function(key, seed) {		var remainder, bytes, h1, h1b, c1, c2, k1, i;		remainder = key.length & 3;		bytes = key.length - remainder;		h1 = seed;		c1 = 0xcc9e2d51;		c2 = 0x1b873593;		i = 0;		while (i < bytes) {			k1 =			((key.charCodeAt(i) & 0xff)) |			((key.charCodeAt(++i) & 0xff) << 8) |			((key.charCodeAt(++i) & 0xff) << 16) |			((key.charCodeAt(++i) & 0xff) << 24);		++i;		k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;		k1 = (k1 << 15) | (k1 >>> 17);		k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;		h1 ^= k1;			h1 = (h1 << 13) | (h1 >>> 19);		h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;		h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));		}		k1 = 0;		switch (remainder) {		case 3: k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;		case 2: k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;		case 1: k1 ^= (key.charCodeAt(i) & 0xff);		k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;		k1 = (k1 << 15) | (k1 >>> 17);		k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;		h1 ^= k1;		}		h1 ^= key.length;		h1 ^= h1 >>> 16;		h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;		h1 ^= h1 >>> 13;		h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;		h1 ^= h1 >>> 16;		return h1 >>> 0;	},	hasLocalStorage: function () {		try{		return !!window.localStorage;		} catch(e) {		return true;		}	},	hasSessionStorage: function () {		try{		return !!window.sessionStorage;		} catch(e) {		return true;		}	},	isCanvasSupported: function () {		var elem = document.createElement('canvas');		return !!(elem.getContext && elem.getContext('2d'));	},	isIESpsv: function () {		if(navigator.appName === 'Microsoft Internet Explorer') {		return true;		} else if(navigator.appName === 'Netscape' && /Trident/.test(navigator.userAgent)){		return true;		}		return false;	},	getSpsvPluginsString: function () {		if(this.isIESpsv() && this.ie_activex){		return this.getSpsvIEPluginsString();		} else {		return this.getSpsvRegularPluginsString();		}	},	getSpsvRegularPluginsString: function () {		return this.map(navigator.plugins, function (p) {		var mimeTypes = this.map(p, function(mt){			return [mt.type, mt.suffixes].join('~');		}).join(',');		return [p.name, p.description, mimeTypes].join('::');		}, this).join(';');	},	getSpsvIEPluginsString: function () {		if(window.ActiveXObject){			var names = ['ShockwaveFlash.ShockwaveFlash',				'AcroPDF.PDF',				'PDF.PdfCtrl',				'QuickTime.QuickTime',				'rmocx.RealPlayer G2 Control',				'rmocx.RealPlayer G2 Control.1',				'RealPlayer.RealPlayer(tm) ActiveX Control (32-bit)',				'RealVideo.RealVideo(tm) ActiveX Control (32-bit)',				'RealPlayer',				'SWCtl.SWCtl',				'WMPlayer.OCX',				'AgControl.AgControl',				'Skype.Detection'];			return this.map(names, function(name){				try{					new ActiveXObject(name);					return name;				} catch(e){					return null;				}			}).join(';');		} else {			return "";		}	},	getSpsvScreenResolution: function () {		var resolution;		 if(this.screen_orientation){		 resolution = (screen.height > screen.width) ? [screen.height, screen.width] : [screen.width, screen.height];		 }else{		 resolution = [screen.height, screen.width];		 }		 return resolution;	},	getSpsvCanvasFingerprint: function () {		try {		var canvas = document.createElement('canvas');		var ctx = canvas.getContext('2d');		var txt = '<p>Spsv Token Payment Test HTML</p>';		ctx.textBaseline = "top";		ctx.font = "14px 'Arial'";		ctx.textBaseline = "alphabetic";		ctx.fillStyle = "#f60";		ctx.fillRect(125,1,62,20);		ctx.fillStyle = "#069";		ctx.fillText(txt, 2, 15);		ctx.fillStyle = "rgba(102, 204, 0, 0.7)";		ctx.fillText(txt, 4, 17);		return canvas.toDataURL();		} catch(e) {		return "";		}	}	};	return SpsvFingerprint;});var SpsvFlg = (function() {	var makedFlg = false;	var makeEndFlg = false;	var tokenResFlg = false;	var ngFlg = false;	return {		getMakedFlg:function() {return makedFlg},		setMakedFlg:function() {return makedFlg = true},		getMakeEndFlg:function() {return makeEndFlg},		setMakeEndFlg:function() {return makeEndFlg = true},		getTokenResFlg:function() {return tokenResFlg},		setTokenResFlg:function() {return tokenResFlg = true},		getNgFlg:function() {return ngFlg},		setNgFlg:function() {return ngFlg = true}	}})();var SpsvApi = (function() {	function spsvButton() {		var button = document.createElement("p");		button.id = "spsvInputCardInfo";		button.style.minwidth = "280px";		button.style.backgroundColor = "#42917B";		button.style.borderRadius = "5px";		button.style.boxShadow = "0 5px 0 rgba(136,136,136,1)";		button.style.border = "none";		button.style.color = "#ffffff";		button.style.display = "block";		button.style.fontSize = "20px";		button.style.fontWeight = "bold";		button.style.textAlign = "center";		button.style.textDecoration = "none";		button.style.padding = "10px 0px";		button.style.cursor = "pointer";		if (button.addEventListener) {			button.addEventListener("click", spsvCardInfoScreen, false);		} else {			button.attachEvent("onclick", spsvCardInfoScreen);		}		var putPlace;		if (document.querySelector) {			putPlace = document.querySelector(".spsvButton");		} else {			putPlace = document.getElementByClassName("spsvButton");		}		var text = putPlace.getAttribute("startText") === null ? "" : putPlace.getAttribute("startText");		var endText = putPlace.getAttribute("endText") === null ? "" : putPlace.getAttribute("endText");		if (text.length < 1) {			text = "\u30ab\u30fc\u30c9\u60c5\u5831\u5165\u529b";			text = text.substr(0,7);		}		if (endText.length < 1) {			endText = "\u30ab\u30fc\u30c9\u60c5\u5831\u5165\u529b\u6e08";			endText = endText.substr(0,8);		}		spsvElementSetTextContent(button, text);		button.style.width = (text.length > endText.length ? text.length : endText.length) + "em";		putPlace.parentNode.appendChild(button);	}	function spsvElementSetTextContent(element, str) {		if (element.textContent !== undefined) {			element.textContent = str;			return;		}		element.innerText = str;	}	function spsvClose() {		var target = document.getElementById("SPSVviewIframe");		if (target !== null) {			setPageScrollable(true);			target.style.display = "none";		}		if (isIos()) {			var targetIos = document.getElementById("spsvIframeWapper");			if (targetIos !== null) {				targetIos.style.display = "none";			}		}	}	function spsvCardInfoScreen() {		if(SpsvFlg.getNgFlg()) {			return;		}		spsvMakeIframe();		var show = setInterval(function(){			if(SpsvFlg.getMakeEndFlg()) {				var target = document.getElementById("SPSVviewIframe");				if(target !== null) {					target.style.display = "block";					setPageScrollable(false);				}				if (isIos()) {					var targetIos = document.getElementById("spsvIframeWapper");					if (targetIos !== null) {						targetIos.style.display = "block";					}				}				clearInterval(show);			}		},100);	}	function isIos() {		if (navigator.userAgent !== undefined && navigator.userAgent !== null && navigator.userAgent !== '' && navigator.userAgent !== 'null' ) {			var ua = navigator.userAgent;			if (ua.indexOf('iPhone') != -1 || ua.indexOf('iPad') != -1 ||				ua.indexOf('iPod') != -1 || ua.indexOf('incognito') != -1 ||				ua.indexOf('webmate') != -1) {				return true;			}		}		return false;	}	function spsvMakeIframe() {		if (SpsvFlg.getMakedFlg()) {			return;		}		var frame = document.createElement("iframe");		var div = spsvMakeDiv(9999, "SPSVviewIframe");		frame.id = "spsvIframe";		frame.style.top = "0px";		frame.style.left = "0px";		frame.style.width = "100%";		frame.style.height = "100%";		frame.style.border = "none";		frame.style.backgroundColor = "#FFFFFF";		frame.src = spsvMakeUrl('SSTN010ReferStart.do', 'encValue2');		frame.sandbox = "allow-scripts allow-forms";		frame.style.display = "block";		div.style.top = "0px";		div.style.left = "0px";		div.style.width = "100%";		div.style.height = "100%";		div.style.overflow = "auto";		div.style.webkitOverflowScrolling = "touch";		if(isIos()) {			frame.style.position = "static";			div.style.position = "static";			var wapperSec = document.createElement("section");			wapperSec.id = "spsvIframeWapper";			wapperSec.style.position = "absolute";			wapperSec.style.zIndex = "9998";			wapperSec.style.top = "0px";			wapperSec.style.left = "0px";			wapperSec.style.width = "100%";			wapperSec.style.height = "100%";			wapperSec.appendChild(div);		}		div.appendChild(frame);		if(isIos()) {			document.body.appendChild(wapperSec);		} else {			document.body.appendChild(div);		}		spsvClose();		if(!window.postMessage) {			if (frame.addEventListener) {				frame.contentWindow.addEventListener("hashchange", spsvGetToken, false);			} else {				frame.contentWindow.attachEvent("onhashchange", spsvGetToken);			}		}		SpsvFlg.setMakedFlg();	}	var spsvPreXoff = 0;	var spsvPreYoff = 0;	var spsvIsFirst = true;	function setPageScrollable( scrollable ) {		var xOffset;		var yOffset;		var de;		var dv = window;		if( document.defaultView) {			dv = document.defaultView;			xOffset = dv.pageXOffset;			yOffset = dv.pageYOffset;		} else {			de = document.documentElement;			xOffset = de.scrollLeft;			yOffset = de.scrollTop;		}		document.documentElement.style.overflow = ( scrollable ? "auto" : "hidden" );		if (isIos()) {			document.body.style.overflow = ( scrollable ? "auto" : "hidden" );			document.body.style.position = "relative";			if (scrollable) {				if (!spsvIsFirst) {					xOffset = spsvPreXoff;					yOffset = spsvPreYoff;				}			} else {				spsvPreXoff = xOffset;				spsvPreYoff = yOffset;				yOffset = 0;				spsvIsFirst = false;			}		}		dv.scrollTo(xOffset, yOffset );	}	function getSpsvCanvasFingerprintForRequireJS() {		try {			var canvas = document.createElement('canvas');			var ctx = canvas.getContext('2d');			var txt = '<p>Spsv Token Payment Test HTML</p>';			ctx.textBaseline = "top";			ctx.font = "14px 'Arial'";			ctx.textBaseline = "alphabetic";			ctx.fillStyle = "#f60";			ctx.fillRect(125,1,62,20);			ctx.fillStyle = "#069";			ctx.fillText(txt, 2, 15);			ctx.fillStyle = "rgba(102, 204, 0, 0.7)";			ctx.fillText(txt, 4, 17);			return canvas.toDataURL();		} catch(e) {			return "";		}	}	function getFingerprintForRequireJS(){		var keys = [];		var flags = [];		keys.push(screen.colorDepth + "bit");		if(screen.colorDepth) {			flags.push("1");		} else {			flags.push("0");		}		keys.push(screen.width/screen.height);		if (screen.width && screen.height) {			flags.push("1");		} else {			flags.push("0");		}		keys.push(getSpsvCanvasFingerprintForRequireJS());		if (keys[2] != "") {			flags.push("1");		} else {			flags.push("0");		}		for (var i = 0; i < flags.length; i++) {			if (flags[i] == "1") {				var src_text = keys.join("###");				return SpsvSHA256Hash(src_text)  + "_" + flags.join("");			}		}		return "0000000000000000000000000000000000000000000000000000000000000000" + "_" + flags.join("");	}	function spsvMakeUrl(kinoName, key) {		var url = "";		var fp;		if (typeof SpsvFingerprint !== 'undefined') {	    	fp = new SpsvFingerprint();		} else {			fp = {				get:function(){					return getFingerprintForRequireJS();				}			};		}		url += spsvGetParam('url') + kinoName;		url += "?EncryptValue=" + spsvGetParam(key);		url += "&FingerPrint=" + fp.get();		return url;	}	function spsvMakeDiv(zIdx, id) {		var newDiv = document.createElement("div");		newDiv.style.position = "fixed";		newDiv.style.zIndex = zIdx;		newDiv.id = id;		return newDiv;	}	function spsvCreateToken(cardNum, cardExpYY, cardExpMM, secCd, birthMM,			birthDD, telNum, sei, mei) {		if(SpsvFlg.getNgFlg()) {			return;		}		if (!SpsvFlg.getMakedFlg()) {			var frame = document.createElement("iframe");			var div = spsvMakeDiv(0, "spsvViewIframe");			frame.id = "spsvIframe";			frame.sandbox = "allow-scripts allow-forms";			frame.src = spsvMakeUrl('SSTN015ReferStart.do', 'encValue1');			div.style.display = "none";			div.appendChild(frame);			document.body.appendChild(div);			if(!window.postMessage) {				if (frame.addEventListener) {					frame.contentWindow.addEventListener("hashchange", spsvGetToken, false);				} else {					frame.contentWindow.attachEvent("onhashchange", spsvGetToken);				}			}			SpsvFlg.setMakedFlg();		}		var requestData = {			cardNo : cardNum === null ? "" : cardNum,			cardExpMonth : cardExpMM === null ? "" : cardExpMM,			cardExpYear : cardExpYY === null ? "" : cardExpYY,			secCd : secCd === null ? "" : secCd,			birthDayMonth : birthMM === null ? "" : birthMM,			birthDayDay : birthDD === null ? "" : birthDD,			telNo : telNum === null ? "" : telNum,			kanaSei : sei === null ? "" : sei,			kanaMei : mei === null ? "" : mei		};		var request = [ "cardNo=" + cardNum, "cardExpMonth=" + cardExpMM,				"cardExpYear=" + cardExpYY, "secCd=" + secCd,				"birthDayMonth=" + birthMM, "birthDayDay=" + birthDD,				"telNo=" + telNum, "kanaSei=" + sei, "kanaMei=" + mei ];		var requestJData = JSON.stringify(requestData);		var iframe = document.getElementById('spsvIframe').contentWindow;		var send = setInterval(function(){			if(SpsvFlg.getMakeEndFlg()){				if ("undefined" != typeof window) {					if (!window.postMessage) {						var e = request.join("&");						iframe.location.hash = e;					} else {						iframe.postMessage(requestJData, "*");					}				}				clearInterval(send);			}		},100);		setTimeout(function() {			clearInterval(send);			if(!SpsvFlg.getTokenResFlg()) {				var mask ='';				if(cardNum === null || cardNum.length <= 4) {					mask = cardNum;				} else if (cardNum.length <= 12) {					mask = cardNum.substr(0,4);					for (var i = 0; i < cardNum.length - 4 ; i++){						mask += '*';					}				} else {					mask = cardNum.substr(0,4);					for (var i = 0; i < 8 ; i++){						mask += '*';					}					mask += cardNum.substr(12, cardNum.length);				}				spsvGetResult('99999999999999999999999999999999', mask);			}		},spsvGetParam('timeOut'));	}	function spsvDeserialize(e) {		for (var t = {}, n = e.split("&"), i = n.length, r = 0; i > r;) {			var a = n[r].split("=");			a[0] = decodeURIComponent(a[0]), a[1] = decodeURIComponent(a[1]);			for (var u = a[0], s = [], o = -1; -1 !== (o = u.indexOf("["));)				s.push(u.substr(o, u.indexOf("]") - o + 1)), u = u.substr(u						.indexOf("]") + 1);			if (0 === s.length)				t[a[0]] = a[1];			else {				o = a[0].substr(0, a[0].indexOf("[")),						"undefined" == typeof t[o] && (t[o] = {}), u = t[o];				for (var l = s.length, c = 0; l - 1 > c;)					o = s[c].substr(1, s[c].length - 2),							"undefined" == typeof u[o] && (u[o] = {}),							u = u[o], ++c;				s = s[l - 1], o = s.substr(1, s.length - 2), u[o] = a[1]			}			++r		}		return t	}	function spsvGetResult(token, cardNo) {		var objSrc = null;		var putPlace = null;		if (document.querySelector) {			objSrc = document.querySelector("script.spsvToken");			putPlace = document.querySelector("script.spsvButton");		} else {			objSrc = document.getElementByClassName("spsvToken");			putPlace = document.getElementByClassName("spsvButton");		}		if (token !== null && token !== undefined && token !== "") {			if (token === "close") {				spsvClose();			} else if(token === 'maked') {				SpsvFlg.setMakeEndFlg();			} else if(token.length == 32){				var card = cardNo == undefined ? "" : cardNo;				window[objSrc.getAttribute("callBackFunc")](token, cardNo);				var button = document.getElementById("spsvInputCardInfo");				var text = "";				if (!(putPlace === null || putPlace.getAttribute("endText") === null)) {					text = putPlace.getAttribute("endText");				}				if (text.length < 1) {					text = "\u30ab\u30fc\u30c9\u60c5\u5831\u5165\u529b\u6e08";					text = text.substr(0,8);				}				if (button !== null) {					button.style.backgroundColor = "#FF7444";					spsvElementSetTextContent(button, text);					button.disabled = true;					button.removeEventListener('click',spsvCardInfoScreen, false);				}				SpsvFlg.setTokenResFlg();				spsvClose();			}		}	}	function spsvGetToken(){		var target = document.getElementById("spsvIframe");		var t = target.contentWindow.location.hash;		setInterval(function(){			if(target === null) {			} else {				var i=target.contentWindow.location.hash;				var r=/^#?\d+&/;				var res = SpsvApi.spsvDeserialize(i.replace(r,""));				i!==t&&r.test(i)&&(t=i,SpsvApispsvGetResult(res.token,res.cardNo))			}		},100)	}	return {		spsvButton : function() {			return spsvButton();		},		spsvCardInfoScreen : function() {			return spsvCardInfoScreen();		},		spsvCreateToken : function(cardNum, cardExpYY, cardExpMM, secCd, birthMM, birthDD, telNum, sei, mei) {			return spsvCreateToken(cardNum, cardExpYY, cardExpMM, secCd, birthMM, birthDD, telNum, sei, mei);		},		spsvGetResult : function(token, cardNo) {			return spsvGetResult(token, cardNo);		}	}})();window.addEventListener("message", function(e) {	if (e.origin !== null && e.origin !== '' && e.origin !== undefined && e.origin != 'null') {		if (e.origin !== spsvGetParam('spsvOrigin')) {			if (e.origin.indexOf(spsvGetParam('spsvOrigin')) == -1) {				return;			}		}	}	try {		var message = JSON.parse(e.data);		if (message.spsvOrigin !== null && message.spsvOrigin !== '' && message.spsvOrigin !== undefined && message.spsvOrigin != 'null') {			if (message.spsvOrigin !== spsvGetParam('spsvOrigin')) {				return;			}			SpsvApi.spsvGetResult(message.token, message.cardNo);		}	} catch(e) {		return;	}});function spsvGetParam(key) {var param = {spsvOrigin:'test.e-scott.jp',url:'https://www.test.e-scott.jp/euser/stn/',timeOut:95000,encValue1:'fYW1y9PVPoF5bRZtua6Jeg7jv%2FNnffgf3OCA%2BTkuTGBbIekES26WB9GJf%2Bzu%2BuziTOZRBu7rVv4vK9El0CUcngcp4rii3CfyjgS2hRxCLgA%3D',encValue2:'fYW1y9PVPoF5bRZtua6Jeg7jv%2FNnffgf3OCA%2BTkuTGBbIekES26WB9GJf%2Bzu%2BuziTOZRBu7rVv4vK9El0CUcnju1traDOdpjpgYqSKE1cUQyT9pD8BNDtQ8GA5Y%2BpnAwRij0cuGD3fKUUkahAKNkds1RRAsxdhPh9ZQywd69GCoN9CJg0QnzUK1WzaWiiJFaD1SYrw8KjOz7uxQxhfHW%2BqmyEpY3sNswQTxpTperq9wcM8bC%2F8RoKd%2BTX8I%2Brn1rX6jj7qDpU%2BGn4brRderx7nj72HLtesS5i9ZppDr6RA5Lw3uhWVBGZPWTGfqQXMmzbzrRRli7hYUIIW5X17oOoaYMEruqo5WusU0Iky6opMkkUehKW5mF3wK3cJ9K8gJoQyyuPWxVN4R1NWS6LUGdOj3AP%2FIUzHhO1NlsCHHVDcM%3D'};return param[key];}